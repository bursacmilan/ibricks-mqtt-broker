@page "/"
@using ibricks_mqtt_broker.Services.Interface
@using ibricks_mqtt_broker.Model
@using ibricks_mqtt_broker.Services
@using ibricks_mqtt_broker_webapp.Components
@using ibricks_mqtt_broker.Model.DeviceState
@inject ICelloStoreService CelloStoreService
@inject IUdpSenderService UdpSenderService;
@inject IIpMacService IpMacService;
@inject IMqttSubscriberService MqttSubscriberService;

<MudText Typo="Typo.h4">Discovered cellos</MudText>

<MudButtonGroup Style="margin: 20px 0 20px 0;" Color="Color.Primary" Size="Size.Large" Variant="Variant.Outlined">
    <MudButton OnClick="@(() => DiscoverClickAsync())">Discover</MudButton>
    <MudButton OnClick="@(async () => await RefreshCellosClick())">Refresh</MudButton>
    <MudButton OnClick="@(async () => await SubscribeMqtt())">Subscribe MQTT</MudButton>
</MudButtonGroup>

<MudTextField @bind-Value="SearchText" Label="Filter" Variant="Variant.Outlined"></MudTextField>

@foreach (var cello in _cellos)
{
    <MudCard Style="margin-top: 20px" Outlined="true">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@cello.Description</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Lightbulb" Color="Color.Default" OnClick="@( async () => await IdentityCello(cello))"/>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudExpansionPanels MultiExpansion="false">
                @if (cello.MeteoStates.Count > 0)
                {
                    <DeviceStates Title="Meteo" Cello="cello" AllDeviceStates="cello.MeteoStates"></DeviceStates>
                }

                @if (cello.ClimateStates.Count > 0)
                {
                    <DeviceStates Title="Climate" Cello="cello" AllDeviceStates="cello.ClimateStates"></DeviceStates>
                }

                @if (cello.RelayStates.Count > 0)
                {
                    <DeviceStates Title="Relay" Cello="cello" AllDeviceStates="cello.RelayStates"></DeviceStates>
                }

                @if (cello.DimmerStates.Count > 0)
                {
                    <DeviceStates Title="Dimmer" Cello="cello" AllDeviceStates="cello.DimmerStates"></DeviceStates>
                }

                @if (cello.CoverStates.Count > 0)
                {
                    <DeviceStates Title="Cover" Cello="cello" AllDeviceStates="cello.CoverStates"></DeviceStates>
                }
                
                @if (cello.EventStates.Count > 0)
                {
                    <DeviceStates Title="Event" Cello="cello" AllDeviceStates="cello.EventStates"></DeviceStates>
                }
                
                @if (cello.SensorStates.Count > 0)
                {
                    <DeviceStates Title="Sensor" Cello="cello" AllDeviceStates="cello.SensorStates"></DeviceStates>
                }
            </MudExpansionPanels>
        </MudCardContent>
    </MudCard>
}

@code
{
    private Cello[] _cellos = [];
    private Cello[] _allCellos = [];

    private string _searchText = string.Empty;

    public string SearchText
    {
        get => _searchText;
        set
        {
            _searchText = value;
            _cellos = _allCellos.Where(c => c.Description.Contains(_searchText, StringComparison.InvariantCultureIgnoreCase)).ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _cellos = await CelloStoreService.GetAllCellosAsync();
        _allCellos = _cellos;
        await base.OnInitializedAsync();
    }

    private async Task RefreshCellosClick()
    {
        _cellos = await CelloStoreService.GetAllCellosAsync();
        _allCellos = _cellos;
    }
    
    private async Task SubscribeMqtt()
    {
        foreach (var cello in _cellos)
        {
            var states = cello.MeteoStates.Values.OfType<DeviceState>()
                .Concat(cello.CoverStates.Values)
                .Concat(cello.ClimateStates.Values)
                .Concat(cello.DimmerStates.Values)
                .Concat(cello.RelayStates.Values);

            foreach (var state in states)
            {
                await MqttSubscriberService.SubscribeToTopicAsync(state.GetMqttCommandTopic());
            }
        }
    }

    private async Task DiscoverClickAsync()
    {
        var message = new IbricksMessage
        {
            Channel = -1,
            AddressFrom = "F84D898E0133",
            AddressTo = IbricksMessageConstants.UnknownAddressTo,
            Command = IbricksMessageCommands.YHELO,
            Type = IbricksMessageType.C,
            AdditionalData = new Dictionary<string, string>
            {
                {
                    "IP", IpMacService.GetIp()
                },
                {
                    "MASTER", "1"
                },
                {"X", IbricksMessageConstants.X}
            },
            Protocol = IbricksMessageConstants.KissProtocol,
            Nonce = IbricksMessageConstants.GetNonce()
        };

        await UdpSenderService.SendMessageAsync(IpMacService.GetBroadcastIp(), NetworkDefaults.UdpPort,
            message);
    }

    private async Task IdentityCello(Cello cello)
    {
        var climateMessage = new IbricksMessage
        {
            Channel = -1,
            Command = IbricksMessageCommands.YSCFG,
            Nonce = IbricksMessageConstants.GetNonce(),
            Protocol = IbricksMessageConstants.KissProtocol,
            Type = IbricksMessageType.C,
            AddressFrom = IpMacService.GetMacAddress(),
            AddressTo = cello.Mac,
            AdditionalData = new Dictionary<string, string>
            {
                {
                    IbricksMessageParts.CFG.Name, "Identify"
                },
                {
                    IbricksMessageParts.V.Name, "0"
                },
                {
                    IbricksMessageParts.X.Name, IbricksMessageConstants.X
                }
            }
        };

        await UdpSenderService.SendMessageAsync(cello.Ip, NetworkDefaults.UdpPort, climateMessage);
    }
}