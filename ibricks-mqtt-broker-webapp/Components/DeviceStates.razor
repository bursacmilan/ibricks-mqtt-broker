@using ibricks_mqtt_broker.Model
@using ibricks_mqtt_broker.Model.DeviceState
@using System.Text.Json
@using ibricks_mqtt_broker.Services.Interface
@inject IDialogService DialogService
@typeparam T where T : ibricks_mqtt_broker.Model.DeviceState.DeviceState;

<MudExpansionPanel>
    <TitleContent>
        <MudText Class="mt-1">@Title (@AllDeviceStates.Count)</MudText>
    </TitleContent>

    <ChildContent>
        <MudTable Items="AllDeviceStates" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Actions</MudTh>
                <MudTh>Displayname</MudTh>
                <MudTh>Unique ID</MudTh>
                <MudTh>Channel</MudTh>
                <MudTh>Current JSON Value</MudTh>
                <MudTh>MQTT Publish</MudTh>
                <MudTh>MQTT Subscribe</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.ChangeCircle" aria-label="copy" OnClick="@( async () => await ChangeName(Cello, context.Value))"></MudIconButton>
                </MudTd>
                <MudTd DataLabel="Displayname">@context.Value.DisplayName</MudTd>
                <MudTd DataLabel="Unique ID">@context.Value.UniqueId</MudTd>
                <MudTd DataLabel="Channel">@context.Value.Channel</MudTd>
                <MudTd DataLabel="Current JSON Value">@JsonSerializer.Serialize(context.Value)</MudTd>
                <MudTd DataLabel="MQTT Publish">@context.Value.GetMqttStateTopic()</MudTd>
                <MudTd DataLabel="MQTT Subscribe">@context.Value.GetMqttCommandTopic()</MudTd>
            </RowTemplate>
        </MudTable>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter] public required Dictionary<int, T> AllDeviceStates { get; set; }
    [Parameter] public required Cello Cello { get; set; }
    [Parameter] public required string Title { get; set; }
    
    private async Task ChangeName(Cello cello, DeviceState deviceState)
    {
        var options = new DialogOptions {CloseOnEscapeKey = true};
        var parameters = new DialogParameters<DeviceNameDialog<T>>
        {
            {x => x.DeviceState, deviceState},
            {x => x.Cello, cello},
            {x => x.DeviceStates, AllDeviceStates},
        };

        var reference = DialogService.Show<DeviceNameDialog<T>>("Device Name", parameters, options).Result;
        await reference.WaitAsync(CancellationToken.None);
        StateHasChanged();
    }
}